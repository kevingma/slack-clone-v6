app SlackCloneV5 {
  wasp: {
    version: "^0.15.0"
  },
  title: "Slack Clone v5",
  client: {
    rootComponent: import { Main } from "@src/client/Main.tsx",
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {},
      google: {
        configFn: import { googleConfig } from "@src/auth/google.ts",
        userSignupFields: import { googleSignupFields } from "@src/auth/google.ts"
      },
      gitHub: {
        configFn: import { githubConfig } from "@src/auth/github.js",
        userSignupFields: import { githubSignupFields } from "@src/auth/github.js"
      },
    },
    onAuthFailedRedirectTo: "/login"
  },
}

// Landing page
route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import { LandingPage } from "@src/client/LandingPage.tsx"
}

//#region Auth
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  authRequired: false,
  component: import { LoginPage } from "@src/auth/LoginPage.tsx"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  authRequired: false,
  component: import { SignupPage } from "@src/auth/SignupPage.tsx"
}
//#endregion

//#region Chat Feature
route ChatPageRoute { path: "/chat", to: ChatPage }
page ChatPage {
  authRequired: true,
  component: import { ChatPage } from "@src/chatFeature/ChatPage.tsx"
}

// Include both ChatMessage and User so we can reference them in the operations
query getChatMessages {
  fn: import { getChatMessages } from "@src/chatFeature/operations.ts",
  entities: [ChatMessage, Channel, User]
}

action createChatMessage {
  fn: import { createChatMessage } from "@src/chatFeature/operations.ts",
  entities: [ChatMessage, Channel, User]
}

query getChannels {
  fn: import { getChannels } from "@src/chatFeature/operations.ts",
  entities: [Channel]
}

// Add `User` here so we can safely reference context.user in createChannel
action createChannel {
  fn: import { createChannel } from "@src/chatFeature/operations.ts",
  entities: [Channel, User]
}

// Deleting a channel also deletes its ChatMessages, 
// and we also need `User` to check if the request is coming from an authenticated user.
action deleteChannel {
  fn: import { deleteChannel } from "@src/chatFeature/operations.ts",
  entities: [Channel, ChatMessage, User]
}
//#endregion