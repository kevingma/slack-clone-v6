datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int                   @id @default(autoincrement())
  email        String                @unique
  username     String                @unique
  displayName  String
  chatMessages ChatMessage[]
  workspaces   WorkspaceUser[]
  // Add this to fix missing opposite relation for ChannelParticipant.user
  channelParticipants ChannelParticipant[]
}

model Workspace {
  id         Int              @id @default(autoincrement())
  name       String
  createdAt  DateTime         @default(now())
  channels   Channel[]
  users      WorkspaceUser[]
}

model WorkspaceUser {
  id          Int       @id @default(autoincrement())
  userId      Int
  workspaceId Int
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  role        String?
}

model Channel {
  id           Int                  @id @default(autoincrement())
  name         String
  createdAt    DateTime             @default(now())
  chatMessages ChatMessage[]
  workspaceId  Int?
  workspace    Workspace?           @relation(fields: [workspaceId], references: [id])
  isDm         Boolean              @default(false)
  participants ChannelParticipant[]

  // New fields for thread support:
  isThread        Boolean      @default(false)
  parentMessageId Int?
  parentMessage   ChatMessage? @relation("ThreadParentMessage", fields: [parentMessageId], references: [id])
}

model ChannelParticipant {
  id        Int      @id @default(autoincrement())
  channelId Int
  userId    Int
  channel   Channel  @relation(fields: [channelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  channelId Int?
  channel   Channel? @relation(fields: [channelId], references: [id])
  
  // Add this to fix missing opposite relation for Channel.parentMessage
  childThreads Channel[] @relation("ThreadParentMessage")
}

model Reaction {
  id        Int         @id @default(autoincrement())
  emoji     String
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  messageId Int
  message   ChatMessage @relation(fields: [messageId], references: [id])
  createdAt DateTime    @default(now())

  @@unique([userId, messageId, emoji], name: "uniqueReaction")
}